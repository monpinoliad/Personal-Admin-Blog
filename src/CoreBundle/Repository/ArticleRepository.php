<?php

namespace CoreBundle\Repository;
use CoreBundle\Entity\Article;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAll(): array
    {
        return $this->findAll();
    }


    /**
     * Get limited item
     *
     * @param $limit
     *
     * @return array
     */
    public function getLimit($limit): array
    {
        return $this->createQueryBuilder('a')
            ->setMaxResults($limit)
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * Get all accomplished project.
     *
     * @return array
     */
    public function getAccomplishedProject(): array {
        return $this->createQueryBuilder('proj')
            ->where('proj.status = :status')
            ->setParameter('status' , Article::STATUS_ACCOMPLISHED)
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * Get all ongoing project.
     *
     * @return array
     */
    public function getOngoingProject(): array {
        return $this->createQueryBuilder('proj')
            ->where('proj.status = :status')
            ->setParameter('status' , Article::STATUS_ONGOING)
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * Return the project using the slugId.
     *
     * @param string $slugId The slugId of the project that will be returned.
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return mixed
     */
    public function getBySlugId($slugId): Article
    {
        return $this->createQueryBuilder('proj')
            ->where('proj.slugId = :slugId')
            ->setParameter('slugId', $slugId)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * Return the rows count.
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return int
     */
    public function getRowCount(): int
    {
        return intval(
            $this
                ->createQueryBuilder('proj')
                ->select('COUNT(proj)')
                ->getQuery()
                ->getSingleScalarResult()
        );
    }

    /**
     * Get the last created project.
     *
     * @return mixed
     */
    public function getLastCreated()
    {
        return $this->findOneBy(
            [],
            ['createdAt' => 'desc']
        );
    }
}
